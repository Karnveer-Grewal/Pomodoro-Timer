{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\karnv\\\\Thinkful\\\\qualified\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport Duration from \"./Duration\";\nimport TimerControls from \"./TimerControls\";\nimport SessionTimer from \"./SessionTimer\";\nimport ProgressBar from \"./ProgressBar\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null);\n  console.log(session); // ToDo: Allow the user to adjust the focus and break duration.\n\n  const [focusDuration, setFocusDuration] = useState(25);\n\n  const handleAddFocusDuration = () => {\n    if (focusDuration < 60) {\n      return setFocusDuration(focusDuration + 5);\n    }\n  };\n\n  const handleSubtractFocusDuration = () => {\n    if (focusDuration > 5) {\n      return setFocusDuration(focusDuration - 5);\n    }\n  };\n\n  const [breakDuration, setBreakDuration] = useState(5);\n\n  const handleAddBreakDuration = () => {\n    if (breakDuration < 15) {\n      return setBreakDuration(breakDuration + 1);\n    }\n  };\n\n  const handleSubtractBreakDuration = () => {\n    if (breakDuration > 1) {\n      return setBreakDuration(breakDuration - 1);\n    }\n  };\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Duration, {\n    focusDuration: focusDuration,\n    handleAddFocusDuration: handleAddFocusDuration,\n    handleSubtractFocusDuration: handleSubtractFocusDuration,\n    breakDuration: breakDuration,\n    handleAddBreakDuration: handleAddBreakDuration,\n    handleSubtractBreakDuration: handleSubtractBreakDuration,\n    session: session,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TimerControls, {\n    isTimerRunning: isTimerRunning,\n    playPause: playPause,\n    session: session,\n    setSession: setSession,\n    setIsTimerRunning: setIsTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SessionTimer, {\n    session: session,\n    isTimerRunning: isTimerRunning,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ProgressBar, {\n    session: session,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/karnv/Thinkful/qualified/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","Duration","TimerControls","SessionTimer","ProgressBar","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","console","log","setFocusDuration","handleAddFocusDuration","handleSubtractFocusDuration","setBreakDuration","handleAddBreakDuration","handleSubtractBreakDuration","Audio","play","playPause","nextState","prevStateSession"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport Duration from \"./Duration\";\nimport TimerControls from \"./TimerControls\";\nimport SessionTimer from \"./SessionTimer\";\nimport ProgressBar from \"./ProgressBar\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n  console.log(session);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState(25);\n\n  const handleAddFocusDuration = () => {\n    if (focusDuration < 60) {\n      return setFocusDuration(focusDuration + 5);\n    }\n  };\n\n  const handleSubtractFocusDuration = () => {\n    if (focusDuration > 5) {\n      return setFocusDuration(focusDuration - 5);\n    }\n  };\n\n  const [breakDuration, setBreakDuration] = useState(5);\n\n  const handleAddBreakDuration = () => {\n    if (breakDuration < 15) {\n      return setBreakDuration(breakDuration + 1);\n    }\n  };\n\n  const handleSubtractBreakDuration = () => {\n    if (breakDuration > 1) {\n      return setBreakDuration(breakDuration - 1);\n    }\n  };\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(\n    () => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <Duration\n          focusDuration={focusDuration}\n          handleAddFocusDuration={handleAddFocusDuration}\n          handleSubtractFocusDuration={handleSubtractFocusDuration}\n          breakDuration={breakDuration}\n          handleAddBreakDuration={handleAddBreakDuration}\n          handleSubtractBreakDuration={handleSubtractBreakDuration}\n          session={session}\n        />\n      </div>\n      <div className=\"row\">\n        <TimerControls\n          isTimerRunning={isTimerRunning}\n          playPause={playPause}\n          session={session}\n          setSession={setSession}\n          setIsTimerRunning={setIsTimerRunning}\n        />\n      </div>\n      <div>\n        {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n        <div className=\"row mb-2\">\n          <SessionTimer\n            session={session}\n            isTimerRunning={isTimerRunning}\n            focusDuration={focusDuration}\n            breakDuration={breakDuration}\n          />\n        </div>\n        <div className=\"row mb-2\">\n          <ProgressBar\n            session={session}\n            focusDuration={focusDuration}\n            breakDuration={breakDuration}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}